2003-03-04 Douglas Lowder <dlowder@earthlink.net>
- Added support for COLLIE and CORGI event types (thanks to Chris Larson
  of the OpenZaurus project)

2003-03-03 Douglas Lowder <dlowder@earthlink.net>
- Fixed segfault bug in src/ts_parse_args.c

2002-11-08  Douglas Lowder <dlowder@earthlink.net>
- Added patch from Scott Anderson to improve tests/ts_calibrate.c by taking
  median of multiple samples for each point.

2002-08-29  Douglas Lowder <dlowder@earthlink.net>
- Added tests/ts_print_raw.c to print raw uncalibrated touchscreen events
  (useful for debugging)

2002-07-11  Douglas Lowder <dlowder@earthlink.net>
- Added code in src/ts_read_raw.c to handle reading events from the mk712
  touchscreen driver on the Hitachi Webpad.

- Fixed a bug in plugins/linear.c (incorrect default calibration in
  absence of /etc/pointercal)

2002-07-10  Douglas Lowder <dlowder@earthlink.net>

- Added a patch by Holger Schurig <h.schurig@mn-logistik.de> to fix
  issues encountered on an Accelent PXA250 board.  The patch is against
  tests/ts_calibrate.c.  Among other things, it removes the extra event
  that was being read before the first crosshair is painted.

- Modified the code in plugins/dejitter.c to guarantee that the "release"
  touchscreen event (event with pressure=0 that occurs when the pointer is
  lifted from the screen) has the same xy position as the preceding event.
  This eliminates the cursor "jumping" that can occur otherwise.

- Fixed a bug in src/ts_read_raw.c that caused segfaults if TSLIB_TSEVENTTYPE
  was not defined in the environment.

2002-07-05  Douglas Lowder <dlowder@earthlink.net>

- libts.so now handles both UCB1x00 and H3600 type touchscreen events.  Default
  is UCB1x00; H3600 is selected by setting environment variable
  TSLIB_TSEVENTTYPE to the value "H3600".

- With the above change, generation of libtsipaq.so is no longer required,
  and it has been removed.

2002-07-03  Douglas Lowder <dlowder@earthlink.net>

- Added back the code to open the virtual console (works if device file chosen
  correctly).

- Made the console device and framebuffer device configurable for ts_calibrate
  and ts_test: new environment variables defined.
  TSLIB_FBDEVICE (defaults to /dev/fb0)
  TSLIB_CONSOLEDEVICE (defaults to /dev/tty)

  On a system using devfs, the above should be set to /dev/fb/0 and /dev/vc/,
  respectively.

2002-07-01  Douglas Lowder <dlowder@earthlink.net>

- Fixes to make this code work better on targets with framebuffers that have
  more than 8 bits per pixel (changes to tests/fbutils.c):
  * Removed the code that attempts to change colormap
  * Temporarily commented out the code that opens /dev/tty1 (does not work on all targets)

- Fixed the test program so that the crosshair is drawn XORed with the text on the screen,
  so the text is not corrupted when the crosshair moves over it. (tests/fbutils.c)

- Made the code much more configurable by adding checks for environment variables:
  TSLIB_CALIBFILE -- location of calibration file for linear plugin (default: /etc/pointercal)
  TSLIB_CONFFILE -- location of configuration file (default: /usr/local/etc/ts.conf)
  TSLIB_PLUGINDIR -- location of plugins (default: /usr/local/share/ts/plugins)
  TSLIB_TSDEVICE -- Name of touchscreen device file if not using input API (default: /dev/touchscreen/ucb1x00)

- Added new file, src/ts_read_raw_ipaq.c, to make code work with the h3600_ts driver
  on the Compaq iPAQ.  This creates a new library, libtsipaq.so, that should replace
  the default libts.so if using this code on an iPAQ.

2002-06-19  Douglas Lowder <dlowder@earthlink.net>

- Fixed a problem that caused tslib_parse_vars() (src/ts_parse_vars.c) to not
  read parameters correctly from the ts.conf file.

- Made modifications to simplify and improve the performance of the dejitter filter
  (plugins/dejitter.c).

- Added the configure script and Makefile.in files, plus other files generated by
  autogen.sh, so that only "configure" needs to be run before running "make".
  If a user wishes to rerun the automake and autoconf steps, run "autogen-clean.sh"
  and then "autogen.sh".

2002-06-17  Douglas Lowder <dlowder@earthlink.net>

- I added a simple script, autogen-clean.sh, to make it easier to change configure.in
  and regenerate configure scripts and Makefiles.

- I made modifications so that npitre's new input API code is now wrapped in
  #ifdef USE_INPUT_API.  Added a new configure flag, --enable-inputapi, which
  is turned on by default, and which adds -DUSE_INPUT_API to CFLAGS in all the
  Makefiles.  --disable-inputapi will return the code to its original behavior
  of opening /dev/touchscreen/ucb1x00 and reading events directly.

- I modified plugins/linear.c so that it determines the full linear transformation
  between touchscreen and framebuffer coordinate systems.  This method not only
  rescales and offsets the coordinates correctly, but also automatically takes care
  of rotation or tilt between the coordinate systems, and automatically takes care
  of cases where X and Y are interchanged.  Therefore, the xyswap parameter is
  no longer required or used.

- I found the framebuffer code in tests/ts_calibrate.c and tests/ts_test.c to be
  broken, and fixed it so it works correctly (used ADS GraphicsClient+ and an Intel
  DBPXA250 (Lubbock) Xscale target for testing). 
  Since there was a lot of duplication, I extracted all the framebuffer specific stuff
  to new files fbutils.c and fbutils.h, so it will be easier to add more framebuffer
  tests in future if desired.  I also extract a couple of fonts and wrote simple text
  printing code so text messages can be displayed in ts_test and ts_calibrate.

- I added a new configure flag, --enable-debug, which is turned off by default.  When
  enabled, it adds -g -ggdb -DDEBUG to CFLAGS in all the Makefiles.  I have debug
  print statements in ts_read_raw and in the plugins that are wrapped with #ifdef DEBUG --
  this way I can see how many events are being filtered away and get a better idea
  of what the filters are doing.

- Joanne Woo <jwoo@mvista.com> added C++ wrappers to the header files so this library
  can be safely used with C++ code.

